trt <- rep(0:num_trt, each = n_per_arm)
ntotal <- length(trt)
z <- MASS::mvrnorm(ntotal, mu = c(0,0), Sigma = matrix(c(1, rho, rho, 1), 2, 2))
z_surv <- z[,1]
z_orr <- z[,2]
exp_rates <- rep(c(hazardC, hazardT), each = n_per_arm)
orrs <- rep(c(orrC, orrT), each = n_per_arm)
surv_time <- -pnorm(q = z_surv, log.p = TRUE)/exp_rates
response <- (z_orr <= qnorm(orrs))+0
drop_rates <- rep(c(dropoutC, dropoutT), each = n_per_arm)
drop_rates[drop_rates<=0] <- 1e-10
cen_time <- rexp(ntotal, rate = drop_rates)
## Simulate enrollment
## Stage 1: 50 patients per arm at rate 25 patients per month
enroll_time <- rep(NA, ntotal)
stage <- rep( c(rep(1, n1_per_arm), rep(2, n2_per_arm)), num_trt+1)
stage1.indx <- which(stage==1)
stage1.size <- length(stage1.indx)
stage1.enroll <- rpwexp_enroll(
n = stage1.size, enroll_rate = data.frame(
duration = c(n1_per_arm*(num_trt+1)/accrual_rate_stage1),
rate = accrual_rate_stage1))
enroll_time[stage1.indx] <- sample(stage1.enroll)
stage2.indx <- which(stage==2)
stage2.size <- length(stage2.indx)
stage2.enroll <- rpwexp_enroll(
n = stage2.size, enroll_rate = data.frame(
duration = c(n2_per_arm*2/accrual_rate_stage2),
rate = accrual_rate_stage2/2*(num_trt+1))) + max(stage1.enroll)
enroll_time[stage2.indx] <- sample(stage2.enroll)
## Combine the data
d <- data.frame(stage = stage, trt = trt, response = response, enterTime = enroll_time,
surv_time = surv_time, cen_time = cen_time) %>%
mutate(survTime = ifelse(surv_time<=cen_time, surv_time, cen_time)) %>%
mutate(calendarTime = .data$enterTime + .data$survTime) %>%
mutate(event = ifelse(surv_time<=cen_time, 1, 0)) %>%
dplyr::select(-surv_time, -cen_time)
return(d)
}
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
library(Phase23Dose)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
library(simtrial)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
num_trt <- length(unique(dat$trt)) - 1
# stage 1 data
d1 <- dat %>% filter(.data$stage==1)
# selected arm with control from both stages
d2 <- dat %>% filter(.data$trt%in%c(0, selected))
max(d2$enterTime)
max(d1$enterTime)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30);num_trt <- length(unique(dat$trt)) - 1
# stage 1 data
d1 <- dat %>% filter(.data$stage==1); max(d1$enterTime)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30);num_trt <- length(unique(dat$trt)) - 1
# stage 1 data
d1 <- dat %>% filter(.data$stage==1); max(d1$enterTime)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30);num_trt <- length(unique(dat$trt)) - 1
# stage 1 data
d1 <- dat %>% filter(.data$stage==1); max(d1$enterTime)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30);num_trt <- length(unique(dat$trt)) - 1
# stage 1 data
d1 <- dat %>% filter(.data$stage==1); max(d1$enterTime)
min(d1$survTime)
median(d1$survTime)
quantile(d1$survTime, 0.1)
d1IA
d1 <- dat %>% filter(.data$stage==1);
d1IA <- cut_by_date(d1, cut_time = max(d1$enterTime)+1)
View(d1IA)
num_trt <- length(unique(dat$trt)) - 1
# stage 1:
d1 <- dat %>% filter(.data$stage==1);
d1IAd <- cut_by_date(d1, cut_time = max(d1$enterTime)+1)
plot(seq(0,1,0.01), qnorm(1-seq(0,1,0.01)))
pvalues
num_trt <- length(unique(dat$trt)) - 1
# stage 1:
d1 <- dat %>% filter(.data$stage==1);
IAd_time <- max(d1$enterTime) + 1e-10
d1IAd <- cut_by_date(d1, cut_time = IAd_time)
pvalues <- rep(NA, num_trt)
for(i in 1:num_trt){
d1IAi <- d1IAd %>% filter(.data$trt%in%c(0, i))
res <- nph::logrank.test(time = d1IAi$survTimeCut, event = d1IAi$eventCut,
group = as.factor(d1IAi$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
pvalues[i] <- res$test$p
}
names(pvalues) <- paste("H", 1:num_trt, sep = "")
g <- matrix(1/(num_trt-1), nrow = num_trt, ncol = num_trt)
diag(g) <- 0
rownames(g) <- colnames(g) <- names(pvalues)
weights <- rep(1, num_trt)/num_trt
cr <- matrix(0.5, num_trt, num_trt)
diag(cr) <- 1
if(test.method == "dunnett"){
pall <- getPvals.dunnett(g=g, w=weights, cr=cr, p=pvalues, adjusted = FALSE)
pselected <- pall[!is.na(pall[, selected]),]
padjusted <- apply(pselected, 1, min, na.rm = TRUE)
}else{
padjusted <- getPvals.simes(g=g, w=weights, p=pvalues, selected = selected)
}
#' @importFrom gMCP generateWeights simes.test
#' @importFrom mvtnorm pmvnorm
#' @importFrom stats qnorm
# Get p-values for simes' method
getPvals.simes <- function(g, w, p, selected){
n <- length(p)
weis <- generateWeights(g, w)
res <- rep(NA, nrow(weis))
for(i in 1:nrow(weis)){
res[i] <- simes.test(pvalues = p, weights = weis[i, (1:n)+n])
}
return(res[weis[,selected]==1])
}
# Get p-values for dunnett method
getPvals.dunnett <- function(g,w,cr,p,adjusted=TRUE,upscale=FALSE){#, alternatives="less"){
hint <- generateWeights(g,w)
res <- t(apply(hint,1,Pvals.dunnett,p=p,cr=cr,upscale=upscale))#, alternatives=alternatives))
if(adjusted){
return(ad.p(res))
} else {
return(res)
}
}
## At the moment hypotheses that are not tested at all get an adj. p-value of 1
ad.p <- function(P){
p.ad <- rep(NA,ncol(P))
for(i in 1:ncol(P)){
out <- apply(P[!is.na(P[,i]),],1,min,na.rm=T)
p.ad[i] <- ifelse(length(out)>0,max(out),1)
}
return(p.ad)
}
## pvalues for dunnett method
Pvals.dunnett <- function(h,cr,p,upscale, alternatives="less") {
#  if(a > .5){
#    stop("alpha levels above .5 are not supported")
#  }
n <- length(h)
I <- h[1:(n/2)]
w <- h[((n/2)+1):n]
hw <- sapply(w,function(x) !isTRUE(all.equal(x,0)))
e <- which(I>0 & hw)
zb <- rep(NA,n/2)
if(length(e) == 0){
return(zb)
}
zb[e] <- p.dunnet.ph23(p[e],cr[e,e],w[e],upscale, alternatives=alternatives)
zb[which(I>0 & !hw)] <- 1
return(zb)
}
p.dunnet.ph23 <- function(p,cr,w,upscale, alternatives="less"){
if(length(cr)>1){
conn <- conn.comp.ph23(cr)
} else {
conn <- 1
}
twosided <- alternatives==rep("two.sided", length(w))
lconn <- sapply(conn,length)
conn <- lapply(conn,as.numeric)
e <- sapply(1:length(p),function(i){
sum(sapply(conn,function(edx){
if(length(edx)>1){
if (upscale=="o3") {
return((1-pmvnorm(
lower=ifelse(twosided[edx],qnorm(pmin(1,(w[edx]*p[i]/(w[i]*sum(w))))/2),-Inf),
upper=ifelse(twosided[edx],qnorm(1-pmin(1,(w[edx]*p[i]/(w[i]*sum(w))))/2),qnorm(1-pmin(1,(w[edx]*p[i]/(w[i]*sum(w)))))),
corr=cr[edx,edx], seed = 20240716, abseps=10^-5)))
} else {
return((1-pmvnorm(
lower=ifelse(twosided[edx],qnorm(pmin(1,(w[edx]*p[i]/(w[i])))/2),-Inf),
upper=ifelse(twosided[edx],qnorm(1-pmin(1,(w[edx]*p[i]/(w[i])))/2),qnorm(1-pmin(1,(w[edx]*p[i]/(w[i]))))),
corr=cr[edx,edx], seed = 20240716,abseps=10^-5))/ifelse(upscale,1,sum(w)))
}
} else {
if(upscale=="o3" || !upscale){
return((w[edx]*p[i]/(w[i]*sum(w))))
} else {
return((w[edx]*p[i]/(w[i])))
}
}
}))})
e <- pmin(e,1)
e
}
conn.comp.ph23 <- function(m){
N <- 1:ncol(m)
M <- numeric(0)
out <- list()
while(length(N)>0){
Q <- setdiff(N,M)[1]
while(length(Q)>0){
w <- Q[1]
M <- c(M,w)
Q <- setdiff(unique(c(Q,which(!is.na(m[w,])))),M)
}
out <- c(out,list(M))
N <- setdiff(N,M)
M <- numeric(0)
}
return(out)
}
if(test.method == "dunnett"){
pall <- getPvals.dunnett(g=g, w=weights, cr=cr, p=pvalues, adjusted = FALSE)
pselected <- pall[!is.na(pall[, selected]),]
padjusted <- apply(pselected, 1, min, na.rm = TRUE)
}else{
padjusted <- getPvals.simes(g=g, w=weights, p=pvalues, selected = selected)
}
library(gMCP)
if(test.method == "dunnett"){
pall <- getPvals.dunnett(g=g, w=weights, cr=cr, p=pvalues, adjusted = FALSE)
pselected <- pall[!is.na(pall[, selected]),]
padjusted <- apply(pselected, 1, min, na.rm = TRUE)
}else{
padjusted <- getPvals.simes(g=g, w=weights, p=pvalues, selected = selected)
}
library(mvtnorm)
if(test.method == "dunnett"){
pall <- getPvals.dunnett(g=g, w=weights, cr=cr, p=pvalues, adjusted = FALSE)
pselected <- pall[!is.na(pall[, selected]),]
padjusted <- apply(pselected, 1, min, na.rm = TRUE)
}else{
padjusted <- getPvals.simes(g=g, w=weights, p=pvalues, selected = selected)
}
d1IAd_selected <- d1IAd %>% filter(.data$trt%in%c(0, selected))
obsEventsIAd <- sum(d1IAd_selected$eventCut)
Zd_tilde <- qnorm(1-max(padjusted))
Zd_tilde
pvalues
qnorm(1-pvalues[selected])
qnorm(1-pvalues)
padjusted
selected
# sample size
d2IA1 <- dIA1 %>% filter(.data$stage==2)
# stage 2: include selected arm and control from both stages
d <- dat %>% filter(.data$trt%in%c(0, selected))
dIA1 <- cut_by_event(d, targetEvents = targetEvents)
IA1_time <- dIA1$calendarCutoff[1]
res <- nph::logrank.test(time = dIA1$survTimeCut, event = dIA1$eventCut,
group = as.factor(dIA1$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
qadjusted <- rep(res$test$p, length(padjusted))
# sample size
d2IA1 <- dIA1 %>% filter(.data$stage==2)
nrow(d1IAd)
nrow(d2IA1)
targetEvents
sum(dIA1$eventCut)
sum(dIA1$eventCut)
obsEventsIA1
obsEventsIA1 <- sum(dIA1$eventCut)
obsEventsIA1
res <- nph::logrank.test(time = dIA1$survTimeCut, event = dIA1$eventCut,
group = as.factor(dIA1$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
res
res$test
res$test$z
qnorm(1-res$tes$p)
res$test$z
Z1 <- res$test$z
Z1
Zd
Zd <- qnorm(1-pvalues[selected])
Zd
Zd_tilde
# combine using independent incremental
Z1_tilde <- Z1 + sqrt(obsEventsIAd/obsEventsIA1)*(Zd_tilde-Zd)
Z1_tilde
getZ1 <- function(dat, selected = 1, targetEvents, test.method = "dunnett"){
num_trt <- length(unique(dat$trt)) - 1
# stage 1:
d1 <- dat %>% filter(.data$stage==1);
IAd_time <- max(d1$enterTime) + 1e-10
d1IAd <- cut_by_date(d1, cut_time = IAd_time)
pvalues <- rep(NA, num_trt)
for(i in 1:num_trt){
d1IAi <- d1IAd %>% filter(.data$trt%in%c(0, i))
res <- nph::logrank.test(time = d1IAi$survTimeCut, event = d1IAi$eventCut,
group = as.factor(d1IAi$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
pvalues[i] <- res$test$p
}
names(pvalues) <- paste("H", 1:num_trt, sep = "")
g <- matrix(1/(num_trt-1), nrow = num_trt, ncol = num_trt)
diag(g) <- 0
rownames(g) <- colnames(g) <- names(pvalues)
weights <- rep(1, num_trt)/num_trt
cr <- matrix(0.5, num_trt, num_trt)
diag(cr) <- 1
if(test.method == "dunnett"){
pall <- getPvals.dunnett(g=g, w=weights, cr=cr, p=pvalues, adjusted = FALSE)
pselected <- pall[!is.na(pall[, selected]),]
padjusted <- apply(pselected, 1, min, na.rm = TRUE)
}else{
padjusted <- getPvals.simes(g=g, w=weights, p=pvalues, selected = selected)
}
d1IAd_selected <- d1IAd %>% filter(.data$trt%in%c(0, selected))
obsEventsIAd <- sum(d1IAd_selected$eventCut)
Zd_tilde <- qnorm(1-max(padjusted))
Zd <- qnorm(1-pvalues[selected])
# stage 2: include selected arm and control from both stages
d <- dat %>% filter(.data$trt%in%c(0, selected))
dIA1 <- cut_by_event(d, targetEvents = targetEvents)
IA1_time <- dIA1$calendarCutoff[1]
obsEventsIA1 <- sum(dIA1$eventCut)
res <- nph::logrank.test(time = dIA1$survTimeCut, event = dIA1$eventCut,
group = as.factor(dIA1$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
Z1 <- res$test$z
# combine using independent incremental
Z1_tilde <- Z1 + sqrt(obsEventsIAd/obsEventsIA1)*(Zd_tilde-Zd)
# sample size
d2IA1 <- dIA1 %>% filter(.data$stage==2)
sample_size <- nrow(d1IAd) + nrow(d2IA1)
# resulted test statistic
return(list(z=Z1_tilde, obsEventsIAd = obsEventsIAd, obsEventsIA1 = obsEventsIA1,
cut_time = IA1_time, sample_size = sample_size))
}
d <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
getZ1(d, selected = 2, targetEvents = 25, test.method="dunnett")
d <- dat %>% filter(.data$trt%in%c(0, selected))
dFA <- cut_by_event(d, targetEvents = targetEventsFA_all)
targetEventsFA_all=30
FA_time <- dFA$calendarCutoff[1]
d <- dat %>% filter(.data$trt%in%c(0, selected))
dFA <- cut_by_event(d, targetEvents = targetEventsFA_all)
FA_time <- dFA$calendarCutoff[1]
obsEventsFA <- sum(dFA$eventCut)
sum(dFA$eventCut)
d <- dat %>% filter(.data$trt%in%c(0, selected))
dFA <- cut_by_event(d, targetEvents = targetEventsFA_all)
FA_time <- dFA$calendarCutoff[1]
obsEventsFA <- sum(dFA$eventCut)
res <- nph::logrank.test(time =dFA$survTimeCut, event = dFA$eventCut,
group = as.factor(dFA$trt), alternative = c("greater"),
rho = 0, gamma = 0, event_time_weights = NULL)
z_FA <- res$test$z
z_FA_tilde <- z_FA + sqrt(obsEventsIA/obsEventsFA)*(z_IA_tilde-z_IA)
nrow(dFA)
(num_trt-1)*20
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
targetEvents = 25
test.method="dunnett"
w=c(0.8, sqrt(1-0.8^2))
selected = 2
num_trt <- length(unique(dat$trt)) - 1
# cut data
d <- dat %>% filter(.data$trt%in%c(0, selected))
library(dplyr)
num_trt <- length(unique(dat$trt)) - 1
# cut data
d <- dat %>% filter(.data$trt%in%c(0, selected))
dIA <- cut_by_event(d, targetEvents = targetEvents)
IA_time <- dIA$calendarCutoff[1]
d1 <- dat %>% filter(.data$stage==1)
d1IA <- cut_by_date(d1, cut_time = IA_time)
nrow(d1IA)
d1IAselected <- d1IA %>% filter(.data$trt%in%c(0, selected))
nrow(d1IA)
nrow(d1IAselected)
sum(d1IAselected$eventCut)
d1IAselected2<-(dIA %>% filter(.data$stage==1))
sum(d1IAselected2$eventCut)
identical(d1IAselected, d1IAselected2)
2 !%in% c(0,2)
2 (!%in%) c(0,2)
2 (%in%) c(0,2)
2 %in% c(0,2)
c(2,1,1,0,3) %in% c(0,2)
!(c(2,1,1,0,3) %in% c(0,2))
## dose selection
d1 <- dat %>% filter(.data$stage==1)
selected
nonselected_cut_time <- max(d1$enterTime) + 1e-10
nonselected_cut_time
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
View(d1nonselected)
View(d1)
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_cut_time)
View(d1nonselected_cut)
View(d)
library(Phase23Dose)
library(dplyr)
dat <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
selected = 2
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
nonselected_max_followup=NULL
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_max_followup)
View(d1nonselected_cut)
View(d1nonselected)
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_max_followup)
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_max_followup)
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
View(d1)
View(d1)
selected
nonselected_max_followup
d1 %>% filter((.data$trt%in%c(0, selected)))
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
d1nonselected
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter((.data$trt%in%c(0, selected)))
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_max_followup)
d1nonselected$survTime <- d1nonselected_cut$survTimeCut
d1nonselected$event <- d1nonselected_cut$eventCut
d1nonselected$calendarTime <- d1nonselected$enterTime + d1nonselected$survTime
View(d1nonselected)
View(d1nonselected_cut)
View(d1nonselected)
View(d1)
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter(!(.data$trt%in%c(0, selected)))
View(d1nonselected)
dremaining <- dat %>% filter((.data$trt%in%c(0, selected)))
View(dremaining)
d1 <- dat %>% filter(.data$stage==1)
if(is.null(nonselected_max_followup)){
nonselected_max_followup <- max(d1$enterTime) + 1e-10
}
d1nonselected <- d1 %>% filter(!(.data$trt%in%c(0, selected)))
dremaining <- dat %>% filter((.data$trt%in%c(0, selected)))
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_max_followup)
d1nonselected$survTime <- d1nonselected_cut$survTimeCut
d1nonselected$event <- d1nonselected_cut$eventCut
d1nonselected$calendarTime <- d1nonselected$enterTime + d1nonselected$survTime
dat_cut <- dremaining %>% add_row(d1nonselected)
View(dat_cut)
?bind_rows
dat_cut <- dplyr::bind_rows(d1nonselected, dremaining)
View(dat_cut)
nonselected_max_followup=Inf
d1 <- dat %>% filter(.data$stage==1)
d1nonselected <- d1 %>% filter(!(.data$trt%in%c(0, selected)))
dremaining <- dat %>% filter((.data$trt%in%c(0, selected)))
d1nonselected_cut <- cut_by_date(d1nonselected, nonselected_max_followup)
View(d1nonselected)
View(d1nonselected_cut)
library(Phase23Dose)
which.min(c(0.1, 0.1, 0.3))
library(Phase23Dose)
library(Phase23Dose)
?mvtnorm::rmvnorm
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
library(Phase23Dose)
d <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
getZstat(d, w=c(0.8, sqrt(1-0.8^2)), selected = 2, targetEvents = 25, test.method="dunnett")
res <- getOC_ph23(seed = 24232, nsim=10)
apply(res, 2, mean, rm=TRUE)
library(Phase23Dose)
res <- getOC_ph23(seed = 24232, nsim=10)
library(Phase23Dose)
library(Phase23Dose)
apply(res, 2, mean, rm=TRUE)
d <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
getZ1(d, selected = 2, targetEvents = 25, test.method="dunnett")
gggg<-NULL
gggg
library(Phase23Dose)
d <- sim_ph23(n1_per_arm = 20, n2_per_arm = 30)
getZ1(d, selected = 2, targetEvents = 25, test.method="dunnett")
library(Phase23Dose)
pkgbuild::check_build_tools(debug = TRUE)
library(Phase23Dose)
res <- getOC_ph23_ii(seed = 24232, nsim=10)
apply(res, 2, mean, rm=TRUE)
library(Phase23Dose)
